# Calling the function in a for loop to go through all names automatically
for (i in top_ten$Name) {
baby_names(i)
}
# Finding baby name associated witg max probability from appended dataframe
max_prob = which.max(max_df$Probability)
max_prob_name = max_df$Name[max_prob]
cat(max_prob_name, "is the female baby name of the top 10 that has maximal conditional probability.")
# Ingesting and adding column names to the data
yob2014 <- read.csv("Baby First Names/yob2014.txt", header = FALSE, stringsAsFactors = FALSE)
colnames(yob2014) <- c("Name","Gender","Count")
# Initializing new dataframe for max conditional probability
max_columns = c("Name","Probability")
max_df = data.frame(matrix(nrow = 0, ncol = length(max_columns)))
colnames(max_df) = max_columns
# Initializing function that computes the conditional probability P(gender=F|name)
baby_names <- function(name){
# Initializing baby name
string_name <- yob2014 %>% filter(Name==name)
# Summing total count for that name from our data set. This is our P(B) or P(Name)
name_total_count <- sum(string_name %>% summarize(Count))
# Subsetting and Summing Female genders for that name, if applicable
Female_only <- string_name %>% filter(Gender=="F")
Female_name_total_count <- sum(Female_only %>% summarize(Count))
# Calculating conditional probability using above variables
probability <- Female_name_total_count/name_total_count
print(paste("The conditional probability that the child is a female given the name is", name, "is:"))
print(probability)
# Maximal Conditional Probability
# Concatenating names and respective probabilities to create a dataframe
for (i in 1:10) {
output = table(name, probability)
max_df[i,] = output
}
}
# The data is in descending order as mentioned in README PDF, so to obtain 10 most common female baby names, we subset first 10 rows
top_ten = data.frame(Name=yob2014$Name[1:10])
# Calling the function in a for loop to go through all names automatically
for (i in top_ten$Name) {
baby_names(i)
}
# Finding baby name associated witg max probability from appended dataframe
max_prob = which.max(max_df$Probability)
max_prob_name = max_df$Name[max_prob]
cat(max_prob_name, "is the female baby name of the top 10 that has maximal conditional probability.")
View(max_df)
# Ingesting and adding column names to the data
yob2014 <- read.csv("Baby First Names/yob2014.txt", header = FALSE, stringsAsFactors = FALSE)
colnames(yob2014) <- c("Name","Gender","Count")
# Initializing new dataframe for max conditional probability
max_columns = c("Name","Probability")
max_df = data.frame(matrix(nrow = 0, ncol = length(max_columns)))
colnames(max_df) = max_columns
# Initializing function that computes the conditional probability P(gender=F|name)
baby_names <- function(name){
# Initializing baby name
string_name <- yob2014 %>% filter(Name==name)
# Summing total count for that name from our data set. This is our P(B) or P(Name)
name_total_count <- sum(string_name %>% summarize(Count))
# Subsetting and Summing Female genders for that name, if applicable
Female_only <- string_name %>% filter(Gender=="F")
Female_name_total_count <- sum(Female_only %>% summarize(Count))
# Calculating conditional probability using above variables
probability <- Female_name_total_count/name_total_count
print(paste("The conditional probability that the child is a female given the name is", name, "is:"))
print(probability)
# Maximal Conditional Probability
# Concatenating names and respective probabilities to create a dataframe
for (i in 1:10) {
output = table(name, probability)
print(output)
rbind(output, max_df)
}
}
# The data is in descending order as mentioned in README PDF, so to obtain 10 most common female baby names, we subset first 10 rows
top_ten = data.frame(Name=yob2014$Name[1:10])
# Calling the function in a for loop to go through all names automatically
for (i in top_ten$Name) {
baby_names(i)
}
# Finding baby name associated witg max probability from appended dataframe
max_prob = which.max(max_df$Probability)
max_prob_name = max_df$Name[max_prob]
cat(max_prob_name, "is the female baby name of the top 10 that has maximal conditional probability.")
# Ingesting and adding column names to the data
yob2014 <- read.csv("Baby First Names/yob2014.txt", header = FALSE, stringsAsFactors = FALSE)
colnames(yob2014) <- c("Name","Gender","Count")
# Initializing new dataframe for max conditional probability
max_columns = c("Name","Probability")
max_df = data.frame(matrix(nrow = 0, ncol = length(max_columns)))
colnames(max_df) = max_columns
# Initializing function that computes the conditional probability P(gender=F|name)
baby_names <- function(name){
# Initializing baby name
string_name <- yob2014 %>% filter(Name==name)
# Summing total count for that name from our data set. This is our P(B) or P(Name)
name_total_count <- sum(string_name %>% summarize(Count))
# Subsetting and Summing Female genders for that name, if applicable
Female_only <- string_name %>% filter(Gender=="F")
Female_name_total_count <- sum(Female_only %>% summarize(Count))
# Calculating conditional probability using above variables
probability <- Female_name_total_count/name_total_count
print(paste("The conditional probability that the child is a female given the name is", name, "is:"))
print(probability)
# Maximal Conditional Probability
# Concatenating names and respective probabilities to create a dataframe
output = tibble(name, probability)
rbind(output, max_df)
}
# The data is in descending order as mentioned in README PDF, so to obtain 10 most common female baby names, we subset first 10 rows
top_ten = data.frame(Name=yob2014$Name[1:10])
# Calling the function in a for loop to go through all names automatically
for (i in top_ten$Name) {
baby_names(i)
}
# Finding baby name associated witg max probability from appended dataframe
max_prob = which.max(max_df$Probability)
max_prob_name = max_df$Name[max_prob]
cat(max_prob_name, "is the female baby name of the top 10 that has maximal conditional probability.")
# Ingesting and adding column names to the data
yob2014 <- read.csv("Baby First Names/yob2014.txt", header = FALSE, stringsAsFactors = FALSE)
colnames(yob2014) <- c("Name","Gender","Count")
# Initializing new dataframe for max conditional probability
max_columns = c("Name","Probability")
max_df = data.frame(matrix(nrow = 0, ncol = length(max_columns)))
colnames(max_df) = max_columns
# Initializing function that computes the conditional probability P(gender=F|name)
baby_names <- function(name){
# Initializing baby name
string_name <- yob2014 %>% filter(Name==name)
# Summing total count for that name from our data set. This is our P(B) or P(Name)
name_total_count <- sum(string_name %>% summarize(Count))
# Subsetting and Summing Female genders for that name, if applicable
Female_only <- string_name %>% filter(Gender=="F")
Female_name_total_count <- sum(Female_only %>% summarize(Count))
# Calculating conditional probability using above variables
probability <- Female_name_total_count/name_total_count
print(paste("The conditional probability that the child is a female given the name is", name, "is:"))
print(probability)
# Maximal Conditional Probability
# Concatenating names and respective probabilities to create a dataframe
output = tibble(name, probability)
for (i in 1:10) {
max_df[i,] = output
}
}
# The data is in descending order as mentioned in README PDF, so to obtain 10 most common female baby names, we subset first 10 rows
top_ten = data.frame(Name=yob2014$Name[1:10])
# Calling the function in a for loop to go through all names automatically
for (i in top_ten$Name) {
baby_names(i)
}
# Finding baby name associated witg max probability from appended dataframe
max_prob = which.max(max_df$Probability)
max_prob_name = max_df$Name[max_prob]
cat(max_prob_name, "is the female baby name of the top 10 that has maximal conditional probability.")
# Ingesting and adding column names to the data
yob2014 <- read.csv("Baby First Names/yob2014.txt", header = FALSE, stringsAsFactors = FALSE)
colnames(yob2014) <- c("Name","Gender","Count")
# Initializing new dataframe for max conditional probability
max_columns = c("Name","Probability")
max_df = data.frame(matrix(nrow = 0, ncol = length(max_columns)))
colnames(max_df) = max_columns
# Initializing function that computes the conditional probability P(gender=F|name)
baby_names <- function(name){
# Initializing baby name
string_name <- yob2014 %>% filter(Name==name)
# Summing total count for that name from our data set. This is our P(B) or P(Name)
name_total_count <- sum(string_name %>% summarize(Count))
# Subsetting and Summing Female genders for that name, if applicable
Female_only <- string_name %>% filter(Gender=="F")
Female_name_total_count <- sum(Female_only %>% summarize(Count))
# Calculating conditional probability using above variables
probability <- Female_name_total_count/name_total_count
print(paste("The conditional probability that the child is a female given the name is", name, "is:"))
print(probability)
# Maximal Conditional Probability
# Concatenating names and respective probabilities to create a dataframe
output = tibble(name, probability)
for (i in 1:10) {
max_df[i,] = output
print(max_df)
}
}
# The data is in descending order as mentioned in README PDF, so to obtain 10 most common female baby names, we subset first 10 rows
top_ten = data.frame(Name=yob2014$Name[1:10])
# Calling the function in a for loop to go through all names automatically
for (i in top_ten$Name) {
baby_names(i)
}
# Finding baby name associated witg max probability from appended dataframe
max_prob = which.max(max_df$Probability)
max_prob_name = max_df$Name[max_prob]
cat(max_prob_name, "is the female baby name of the top 10 that has maximal conditional probability.")
# Ingesting and adding column names to the data
yob2014 <- read.csv("Baby First Names/yob2014.txt", header = FALSE, stringsAsFactors = FALSE)
colnames(yob2014) <- c("Name","Gender","Count")
# Initializing new dataframe for max conditional probability
max_df = data.frame(Name = yob2014$Name[1:10])
# Initializing function that computes the conditional probability P(gender=F|name)
baby_names <- function(name){
for (i in 1:10){
# Initializing baby name
string_name <- yob2014 %>% filter(Name==name)
# Summing total count for that name from our data set. This is our P(B) or P(Name)
name_total_count <- sum(string_name %>% summarize(Count))
# Subsetting and Summing Female genders for that name, if applicable
Female_only <- string_name %>% filter(Gender=="F")
Female_name_total_count <- sum(Female_only %>% summarize(Count))
# Calculating conditional probability using above variables
probability <- Female_name_total_count/name_total_count
print(paste("The conditional probability that the child is a female given the name is", name, "is:"))
print(probability)
max_df$Probability[i]=probability
}
}
# The data is in descending order as mentioned in README PDF, so to obtain 10 most common female baby names, we subset first 10 rows
# Calling the function in a for loop to go through all names automatically
for (i in yob2014$Name[1:10]) {
baby_names(i)
}
max_prob = which.max(max_df$Probability)
max_prob_name = max_df$Name[max_prob]
cat(max_prob_name, "is the female baby name of the top 10 that has maximal conditional probability.")
View(max_df)
# Ingesting and adding column names to the data
yob2014 <- read.csv("Baby First Names/yob2014.txt", header = FALSE, stringsAsFactors = FALSE)
colnames(yob2014) <- c("Name","Gender","Count")
# Initializing new dataframe for max conditional probability
max_df = data.frame(Name = yob2014$Name[1:10])
# Initializing function that computes the conditional probability P(gender=F|name)
baby_names <- function(name){
for (i in 1:10){
# Initializing baby name
string_name <- yob2014 %>% filter(Name==name)
# Summing total count for that name from our data set. This is our P(B) or P(Name)
name_total_count <- sum(string_name %>% summarize(Count))
# Subsetting and Summing Female genders for that name, if applicable
Female_only <- string_name %>% filter(Gender=="F")
Female_name_total_count <- sum(Female_only %>% summarize(Count))
# Calculating conditional probability using above variables
probability <- Female_name_total_count/name_total_count
print(paste("The conditional probability that the child is a female given the name is", name, "is:"))
print(probability)
max_df$Probability[i]=probability
print(max_df)
}
}
# The data is in descending order as mentioned in README PDF, so to obtain 10 most common female baby names, we subset first 10 rows
# Calling the function in a for loop to go through all names automatically
for (i in yob2014$Name[1:10]) {
baby_names(i)
}
max_prob = which.max(max_df$Probability)
max_prob_name = max_df$Name[max_prob]
cat(max_prob_name, "is the female baby name of the top 10 that has maximal conditional probability.")
# Ingesting and adding column names to the data
yob2014 <- read.csv("Baby First Names/yob2014.txt", header = FALSE, stringsAsFactors = FALSE)
colnames(yob2014) <- c("Name","Gender","Count")
# Initializing function that computes the conditional probability P(gender=F|name)
baby_names <- function(name){
# Initializing baby name
string_name <- yob2014 %>% filter(Name==name)
# Summing total count for that name from our data set. This is our P(B) or P(Name)
name_total_count <- sum(string_name %>% summarize(Count))
# Subsetting and Summing Female genders for that name, if applicable
Female_only <- string_name %>% filter(Gender=="F")
Female_name_total_count <- sum(Female_only %>% summarize(Count))
# Calculating conditional probability using above variables
probability <- Female_name_total_count/name_total_count
print(paste("The conditional probability that the child is a female given the name is", name, "is:"))
print(probability)
}
# The data is in descending order as mentioned in README PDF, so to obtain 10 most common female baby names, we subset first 10 rows
# Calling the function in a for loop to go through all names automatically
for (i in yob2014$Name[1:10]) {
baby_names(i)
}
#print() "is the female baby name of the top 10 that has maximal conditional probability.")
set.seed(1234)
X <- runif(100000, 0, 1)
Y <- runif(100000, 0, 1)
df <- data.frame(X,Y)
# Computing two additional columns for the events A and B
df$A <- df$X <= (1/2)
df$B <- df$Y <= cos(pi*(X))
# Estimating the relevant probabilities by sub-setting in different code chunks
P_of_B <- nrow(df[df$B==TRUE,])/nrow(df)
print(paste("P(B) is:",P_of_B))
# Using subset function here to find intersecting probabiltiies of A and B
P_of_A = 1/2
P_of_A_given_B <- nrow(subset(df, A==TRUE & B=="TRUE"))/nrow(df)
print(paste("P(A|B) is:",P_of_A_given_B))
View(df)
set.seed(1234)
X <- runif(100000, 0, 1)
Y <- runif(100000, 0, 1)
df <- data.frame(X,Y)
# Computing two additional columns for the events A and B
df$A <- df$X <= (1/2)
df$B <- df$Y <= cos(pi*(X))
# Estimating the relevant probabilities by sub-setting in different code chunks
P_of_B <- nrow(df[df$B==TRUE,])/nrow(df)
print(paste("P(B) is:",P_of_B))
# Using subset function here to find intersecting probabiltiies of A and B
P_of_A = 1/2
P_of_A_given_B <- (nrow(subset(df, A==TRUE & B=="TRUE")))/(nrow(df))
print(paste("P(A|B) is:",P_of_A_given_B))
# P(B|A) = P(B intersection A)/P(B)
# We use the value of P(B) found in part b)
P_of_B_given_A <- nrow(subset(df, A==TRUE & B=="TRUE"))/nrow(P_of_B)
print(paste("P(B|A) is:",P_of_B_given_A))
# P(B|A) = P(B intersection A)/P(B)
P_of_B_given_A <- (nrow(subset(df, A==TRUE & B=="TRUE")))/(nrow(df[df$B==TRUE,]))
print(paste("P(B|A) is:", P_of_B_given_A))
# P(B|A) = P(B intersection A)/P(B)
P_of_B_given_A <- (nrow(subset(df, A==TRUE & B==TRUE)))/(nrow(df[df$B==TRUE,]))
print(paste("P(B|A) is:", P_of_B_given_A))
set.seed(1234)
X <- runif(100000, 0, 1)
Y <- runif(100000, 0, 1)
df <- data.frame(X,Y)
# Computing two additional columns for the events A and B
df$A <- df$X < (1/2)
df$B <- df$Y < cos(pi*(X))
# Estimating the relevant probabilities by sub-setting in different code chunks
P_of_B <- nrow(df[df$B==TRUE,])/nrow(df)
print(paste("P(B) is:",P_of_B))
# Using subset function here to find intersecting probabiltiies of A and B
P_of_A = 1/2
P_of_A_given_B <- (nrow(subset(df, A==TRUE & B=="TRUE")))/(nrow(df))
print(paste("P(A|B) is:",P_of_A_given_B))
# P(B|A) = P(B intersection A)/P(B)
P_of_B_given_A <- (nrow(subset(df, A==TRUE & B==TRUE)))/(nrow(df[df$B==TRUE,]))
print(paste("P(B|A) is:", P_of_B_given_A))
df %>% filter(B==TRUE) %>% summarize()
print(df %>% filter(B==TRUE) %>% summarize())
df %>% filter(B==TRUE) %>% summarize(n)
df %>% filter(B==TRUE) %>% summarize(count=n)
df %>% filter(B==TRUE) %>% summarize(count=n())
nrow(df)
(df %>% filter(B==TRUE) %>% summarize(count=n()))/nrow(df)
(df %>% filter(B==TRUE & A==TRUE) %>% summarize(count=n()))/nrow(df)
P_of_A_given_B
(P_of_A_given_B*P_of_B)/P_of_A
# Using subset function here to find intersecting probabilities of A and B
P_of_A = 1/2
P_of_A_given_B <- ((nrow(subset(df, A==TRUE & B==TRUE)))/(nrow(df)))/P_of_B
# could also do ((df %>% filter(B==TRUE & A==TRUE) %>% summarize(count=n()))/nrow(df))/P_of_B
print(paste("P(A|B) is:",P_of_A_given_B))
nrow(subset(df, A==TRUE & B==TRUE))
df %>% filter(B==TRUE & A==TRUE) %>% summarize(count=n())
df %>% filter(B==TRUE) %>% summarize(count=n())
df %>% filter(a==TRUE) %>% summarize(count=n())
df %>% filter(A==TRUE) %>% summarize(count=n())
# P(B|A) = P(B intersection A)/P(B) = (P_of_A_given_B*P_of_B)/P_of_A
P_of_B_given_A <- (P_of_A_given_B*P_of_B)/P_of_A
#P_of_B_given_A <- (nrow(subset(df, A==TRUE & B==TRUE)))/(nrow(df[df$B==TRUE,]))
print(paste("P(B|A) is:", P_of_B_given_A))
(P_of_A_given_B*P_of_B)/P_of_A
((nrow(subset(df, A==TRUE & B==TRUE)))/(nrow(df)))/0.5
set.seed(1234)
X <- runif(100000, 0, 1)
Y <- runif(100000, 0, 1)
df <- data.frame(X,Y)
# Computing two additional columns for the events A and B
df$A <- df$X < (1/2)
df$B <- df$Y < cos(pi*(X))
# Estimating the relevant probabilities by sub-setting in different code chunks
P_of_B <- (df %>% filter(B==TRUE) %>% summarize(count=n()))/nrow(df)
print(paste("P(B) is:",P_of_B))
# Using subset function here to find intersecting probabilities of A and B
P_of_A = 1/2
P_of_A_given_B <- ((nrow(subset(df, A==TRUE & B==TRUE)))/(nrow(df)))/P_of_B
# could also do ((df %>% filter(B==TRUE & A==TRUE) %>% summarize(count=n()))/nrow(df))/P_of_B
print(paste("P(A|B) is:",P_of_A_given_B))
# P(B|A) = P(B intersection A)/P(B) = (P_of_A_given_B*P_of_B)/P_of_A
P_of_B_given_A <- (P_of_A_given_B*P_of_B)/P_of_A
# could also do: P_of_B_given_A <- ((nrow(subset(df, A==TRUE & B==TRUE)))/(nrow(df)))/P_of_A
print(paste("P(B|A) is:", P_of_B_given_A))
library('tidyverse')
suit <- c("Diamonds", "Clubs", "Hearts", "Spades")
numbers <- c(2,3,4,5,6,7,8,9,10, "Ace")
facecard <- c("King", "Queen", "Jack")
All <- c(numbers, facecard)
All.4 <- rep(All, 4)
suits.13 <- rep(suit, 13)
Card_Deck <- data.frame(All.4, suits.13)
deck <- paste(Card_Deck$All.4, Card_Deck$suits.13)
length(deck)
# Credit: https://medium.com/@roselyn.mainali/card-probabilities-with-simulation-in-r-5d3ab8d75e8d
success <- c()
for(i in 1:100000) {
s <- sample(suits.13, 2, replace = TRUE) # using suits variable instead of deck to avoid string manipulations
# a table of two same cards gives the maximum of 2, which is a success in this case
if(s[1] == "Diamonds" & s[2] == "Diamonds") {
success <- c(success, i)
}
}
paste("Probability of getting two diamonds with replacement =", length(success)/i)
# Credit: https://medium.com/@roselyn.mainali/card-probabilities-with-simulation-in-r-5d3ab8d75e8d
success <- c()
for(i in 1:100000) {
s <- sample(suits.13, 2, replace = FALSE)  #using suits variable instead of deck to avoid string manipulations
# a table of two same cards gives the maximum of 2, which is a success in this case
if(s[1] == "Diamonds" & s[2] == "Diamonds") {
success <- c(success, i)
}
}
paste("Probability of getting two diamonds without replacement =", length(success)/i)
spade <- rep("spade", 13)
heart <- rep("heart", 13)
clover <- rep("clover", 13)
diamond <- rep("diamond", 13)
cardstack <- c(spade, heart, clover, diamond)
print(cardstack)
print(suits.13)
# Credit: https://medium.com/@roselyn.mainali/card-probabilities-with-simulation-in-r-5d3ab8d75e8d
success <- c()
for(i in 1:1000000) {
s <- sample(suits.13, 2, replace = TRUE) # using suits variable instead of deck to avoid string manipulations
# a table of two same cards gives the maximum of 2, which is a success in this case
if(s[1] == "Diamonds" & s[2] == "Diamonds") {
success <- c(success, i)
}
}
paste("Probability of getting two diamonds with replacement =", length(success)/i)
# Credit: https://medium.com/@roselyn.mainali/card-probabilities-with-simulation-in-r-5d3ab8d75e8d
success <- c()
for(i in 1:1000000) {
s <- sample(suits.13, 2, replace = FALSE)  #using suits variable instead of deck to avoid string manipulations
# a table of two same cards gives the maximum of 2, which is a success in this case
if(s[1] == "Diamonds" & s[2] == "Diamonds") {
success <- c(success, i)
}
}
paste("Probability of getting two diamonds without replacement =", length(success)/i)
library('tidyverse')
suit <- c("Diamonds", "Clubs", "Hearts", "Spades")
numbers <- c(2,3,4,5,6,7,8,9,10, "Ace")
facecard <- c("King", "Queen", "Jack")
All <- c(numbers, facecard)
All.4 <- rep(All, 4)
suits.13 <- rep(suit, 13)
Card_Deck <- data.frame(All.4, suits.13)
deck <- paste(Card_Deck$All.4, Card_Deck$suits.13)
length(deck)
# Credit: https://medium.com/@roselyn.mainali/card-probabilities-with-simulation-in-r-5d3ab8d75e8d
success <- c()
for(i in 1:1000000) {
s <- sample(suits.13, 2, replace = TRUE) # using suits variable instead of deck to avoid string manipulations
# a table of two same cards gives the maximum of 2, which is a success in this case
if(s[1] == "Diamonds" & s[2] == "Diamonds") {
success <- c(success, i)
}
}
paste("Probability of getting two diamonds with replacement =", length(success)/i)
# Credit: https://medium.com/@roselyn.mainali/card-probabilities-with-simulation-in-r-5d3ab8d75e8d
success <- c()
for(i in 1:1000000) {
s <- sample(suits.13, 2, replace = FALSE)  #using suits variable instead of deck to avoid string manipulations
# a table of two same cards gives the maximum of 2, which is a success in this case
if(s[1] == "Diamonds" & s[2] == "Diamonds") {
success <- c(success, i)
}
}
paste("Probability of getting two diamonds without replacement =", length(success)/i)
# For 10 sims
s <- sample(suits.13, 10, replace = TRUE) #using All.4 variable instead of deck to avoid string manipulations
print("For 10 simulations, the distribution of suit count is: ")
table(s)
# For 100 sims
s <- sample(suits.13, 100, replace = TRUE) #using All.4 variable instead of deck to avoid string manipulationsprint
("For 100 simulations, the distribution of suit count is: ")
table(s)
# For 1000 sims
s <- sample(suits.13, 1000, replace = TRUE) #using All.4 variable instead of deck to avoid string manipulations
("For 1000 simulations, the distribution of suit count is: ")
table(s)
# For 10000 sims
s <- sample(suits.13, 10000, replace = TRUE) #using All.4 variable instead of deck to avoid string manipulations
("For 10000 simulations, the distribution of suit count is: ")
table(s)
set.seed(2828)
# For 10 sims
s <- sample(suits.13, 10, replace = TRUE) #using All.4 variable instead of deck to avoid string manipulations
print("For 10 simulations, the distribution of suit count is: ")
table(s)
# For 100 sims
s <- sample(suits.13, 100, replace = TRUE) #using All.4 variable instead of deck to avoid string manipulationsprint
("For 100 simulations, the distribution of suit count is: ")
table(s)
# For 1000 sims
s <- sample(suits.13, 1000, replace = TRUE) #using All.4 variable instead of deck to avoid string manipulations
("For 1000 simulations, the distribution of suit count is: ")
table(s)
# For 10000 sims
s <- sample(suits.13, 10000, replace = TRUE) #using All.4 variable instead of deck to avoid string manipulations
("For 10000 simulations, the distribution of suit count is: ")
table(s)
x.1 <- runif(1000, 0, 5)
x.2 <- runif(1000, 0, 5)
x.3 = x.1 + x.2
hist(x.3)
plot.ecdf(x.3, xlab='X1+X2', main='ECDF(X1+X2)')
x.4 = x.1 * x.2
hist(x.4, xlab='X1.X2', main='Histogram of X1.X2')
plot.ecdf(x.4, xlab='X1.X2', main='ECDF(X1.X2)')
x.5 = 1 - x.1
hist(x.5, xlab='1-X1', main='Histogram of 1-X1')
plot.ecdf(x.5, xlab='1-X1', main='ECDF(1-X1)')
setwd('/Users/Tegveer/anly-501-project-TegveerG/501-project-website/pages')
