s <- sample(suits.13, 2, replace = TRUE) # using suits variable instead of deck to avoid string manipulations
# a table of two same cards gives the maximum of 2, which is a success in this case
if(s[1] == "Diamonds" & s[2] == "Diamonds") {
success <- c(success, i)
}
}
paste("Probability of getting two diamonds with replacement =", length(success)/i)
# Credit: https://medium.com/@roselyn.mainali/card-probabilities-with-simulation-in-r-5d3ab8d75e8d
success <- c()
for(i in 1:1000000) {
s <- sample(suits.13, 2, replace = FALSE)  #using suits variable instead of deck to avoid string manipulations
# a table of two same cards gives the maximum of 2, which is a success in this case
if(s[1] == "Diamonds" & s[2] == "Diamonds") {
success <- c(success, i)
}
}
paste("Probability of getting two diamonds without replacement =", length(success)/i)
library('tidyverse')
suit <- c("Diamonds", "Clubs", "Hearts", "Spades")
numbers <- c(2,3,4,5,6,7,8,9,10, "Ace")
facecard <- c("King", "Queen", "Jack")
All <- c(numbers, facecard)
All.4 <- rep(All, 4)
suits.13 <- rep(suit, 13)
Card_Deck <- data.frame(All.4, suits.13)
deck <- paste(Card_Deck$All.4, Card_Deck$suits.13)
length(deck)
# Credit: https://medium.com/@roselyn.mainali/card-probabilities-with-simulation-in-r-5d3ab8d75e8d
success <- c()
for(i in 1:1000000) {
s <- sample(suits.13, 2, replace = TRUE) # using suits variable instead of deck to avoid string manipulations
# a table of two same cards gives the maximum of 2, which is a success in this case
if(s[1] == "Diamonds" & s[2] == "Diamonds") {
success <- c(success, i)
}
}
paste("Probability of getting two diamonds with replacement =", length(success)/i)
# Credit: https://medium.com/@roselyn.mainali/card-probabilities-with-simulation-in-r-5d3ab8d75e8d
success <- c()
for(i in 1:1000000) {
s <- sample(suits.13, 2, replace = FALSE)  #using suits variable instead of deck to avoid string manipulations
# a table of two same cards gives the maximum of 2, which is a success in this case
if(s[1] == "Diamonds" & s[2] == "Diamonds") {
success <- c(success, i)
}
}
paste("Probability of getting two diamonds without replacement =", length(success)/i)
# For 10 sims
s <- sample(suits.13, 10, replace = TRUE) #using All.4 variable instead of deck to avoid string manipulations
print("For 10 simulations, the distribution of suit count is: ")
table(s)
# For 100 sims
s <- sample(suits.13, 100, replace = TRUE) #using All.4 variable instead of deck to avoid string manipulationsprint
("For 100 simulations, the distribution of suit count is: ")
table(s)
# For 1000 sims
s <- sample(suits.13, 1000, replace = TRUE) #using All.4 variable instead of deck to avoid string manipulations
("For 1000 simulations, the distribution of suit count is: ")
table(s)
# For 10000 sims
s <- sample(suits.13, 10000, replace = TRUE) #using All.4 variable instead of deck to avoid string manipulations
("For 10000 simulations, the distribution of suit count is: ")
table(s)
set.seed(2828)
# For 10 sims
s <- sample(suits.13, 10, replace = TRUE) #using All.4 variable instead of deck to avoid string manipulations
print("For 10 simulations, the distribution of suit count is: ")
table(s)
# For 100 sims
s <- sample(suits.13, 100, replace = TRUE) #using All.4 variable instead of deck to avoid string manipulationsprint
("For 100 simulations, the distribution of suit count is: ")
table(s)
# For 1000 sims
s <- sample(suits.13, 1000, replace = TRUE) #using All.4 variable instead of deck to avoid string manipulations
("For 1000 simulations, the distribution of suit count is: ")
table(s)
# For 10000 sims
s <- sample(suits.13, 10000, replace = TRUE) #using All.4 variable instead of deck to avoid string manipulations
("For 10000 simulations, the distribution of suit count is: ")
table(s)
x.1 <- runif(1000, 0, 5)
x.2 <- runif(1000, 0, 5)
x.3 = x.1 + x.2
hist(x.3)
plot.ecdf(x.3, xlab='X1+X2', main='ECDF(X1+X2)')
x.4 = x.1 * x.2
hist(x.4, xlab='X1.X2', main='Histogram of X1.X2')
plot.ecdf(x.4, xlab='X1.X2', main='ECDF(X1.X2)')
x.5 = 1 - x.1
hist(x.5, xlab='1-X1', main='Histogram of 1-X1')
plot.ecdf(x.5, xlab='1-X1', main='ECDF(1-X1)')
library(tidyverse)
artists <- read.csv("Artists.csv")
swift_legend_speech <- artists %>%
filter(artist_name!="Beyoncé") %>% select(artist_name, speechiness)
(avg_speech <- swift_legend_speech %>%
group_by(artist_name) %>%
summarise(avg_speechiness=mean(speechiness)))
ggplot(avg_speech, aes(x=artist_name, y=avg_speechiness)) +
geom_bar(stat = "identity", fill="lightblue") +
coord_flip() +
theme_minimal()
(mean.diff <- avg_speech[2,2] - avg_speech[1,2]) # Swift - Legend
swift <- swift_legend_speech %>%
filter(artist_name=="Taylor Swift") %>%
select(speechiness)
legend <- swift_legend_speech %>%
filter(artist_name=="John Legend") %>%
select(speechiness)
t.test(swift, legend, alt="greater")
bstrap_swift <- artists$speechiness[artists$artist_name=="Taylor Swift"]
bstrap_legend <- artists$speechiness[artists$artist_name=="John Legend"]
n_swift=length(bstrap_swift)
n_legend=length(bstrap_legend)
N=100000
diff.means = numeric(N)
for (i in 1:N)
{
sample.swift <- sample(bstrap_swift, n_swift, replace = TRUE)
sample.legend <- sample(bstrap_legend, n_legend, replace = TRUE)
diff.means[i] <- mean(sample.swift)-mean(sample.legend) #bootstrap sample mean
}
quantile(diff.means, c(0.025, 0.975))
(bias= mean(diff.means)-mean(mean.diff)) # estimated bias
mean(diff.means)
(bias= mean(diff.means)-(mean.diff)) # estimated bias
mean.diff
(bias = mean(diff.means) - mean.diff) # estimated bias
(bias = mean(diff.means) - 0.02102469) # estimated bias
View(artists)
artists <- artists %>% mutate(Valence_C = ifelse(Valence %in% 0.8:1, "more positive", ifelse(Valence %in% 0.5:0.79, "Moderate", ifelse(Valence %in% 0.0:0.49, "more negative"))))
artists <- artists %>% mutate(Valence_C = ifelse(Valence %in% 0.8:1, "more positive", ifelse(Valence %in% 0.5:0.79, "Moderate", ifelse(Valence %in% 0.0:0.49, "more negative", NA))))
View(artists)
ifelse(artists$Valence %in% 0.8:1, "more positive", NA)
STR(artists)
str(artists)
ifelse(artists$Valence %in% 0.01:1, "exists", NA)
artists$Valence >n0l88
artists$Valence > 0.88
artists <- artists %>% mutate(Valence_C = ifelse(Valence >= 0.8, "more positive", ifelse(Valence >= 0.5 || Valence <= 0.79, "Moderate", ifelse(Valence <= 0.49, "more negative", NA))))
artists <- artists %>% mutate(Valence_C = case_when(Valence >= 0.8 ~ "more positive", Valence >= 0.5 || Valence <= 0.79 ~ "Moderate", Valence <= 0.49 ~ "more negative"))
artists <- artists %>% mutate(Valence_C = case_when(any(Valence >= 0.8) ~ "more positive", any(Valence >= 0.5 || Valence <= 0.79) ~ "Moderate", any(Valence <= 0.49) ~ "more negative"))
library(Rspotify)
library(spotidy)
library(httr)
library(jsonlite)
library(spotifyr)#spotifyr is an R wrapper for pulling track audio features and other information from Spotify’s Web API in bulk.
#my_token <- get_spotify_api_token(client_id = "b644c5d65c904fd4b3a9a7e08efc2426",
# client_secret = "ff5c05cb47bf4e709d475059c131ef6d")
#or
#get_spotify_access_token(
#client_id = Sys.getenv("b644c5d65c904fd4b3a9a7e08efc2426"),
#client_secret = Sys.getenv("ff5c05cb47bf4e709d475059c131ef6d"))
Sys.setenv(SPOTIFY_CLIENT_ID = 'b644c5d65c904fd4b3a9a7e08efc2426')
Sys.setenv(SPOTIFY_CLIENT_SECRET = 'ff5c05cb47bf4e709d475059c131ef6d')
access_token <- get_spotify_access_token()
library(tidyverse)
artists <- read.csv("Artists.csv")
swift_legend_speech <- artists %>%
filter(artist_name!="Beyoncé") %>% select(artist_name, speechiness)
(avg_speech <- swift_legend_speech %>%
group_by(artist_name) %>%
summarise(avg_speechiness=mean(speechiness)))
ggplot(avg_speech, aes(x=artist_name, y=avg_speechiness)) +
geom_bar(stat = "identity", fill="lightblue") +
coord_flip() +
theme_minimal()
(mean.diff <- avg_speech[2,2] - avg_speech[1,2]) # Swift - Legend
swift <- swift_legend_speech %>%
filter(artist_name=="Taylor Swift") %>%
select(speechiness)
legend <- swift_legend_speech %>%
filter(artist_name=="John Legend") %>%
select(speechiness)
t.test(swift, legend, alt="greater")
bstrap_swift <- artists$speechiness[artists$artist_name=="Taylor Swift"]
bstrap_legend <- artists$speechiness[artists$artist_name=="John Legend"]
n_swift=length(bstrap_swift)
n_legend=length(bstrap_legend)
N=100000
diff.means = numeric(N)
for (i in 1:N)
{
sample.swift <- sample(bstrap_swift, n_swift, replace = TRUE)
sample.legend <- sample(bstrap_legend, n_legend, replace = TRUE)
diff.means[i] <- mean(sample.swift)-mean(sample.legend) #bootstrap sample mean
}
quantile(diff.means, c(0.025, 0.975))
(bias = mean(diff.means) - mean.diff) # estimated bias
artists <- artists %>% mutate(Valence_C = case_when(any(Valence >= 0.8) ~ "more positive", any(Valence >= 0.5 || Valence <= 0.79) ~ "Moderate", any(Valence <= 0.49) ~ "more negative"))
artists <- artists %>% mutate(Valence_C = case_when(any(Valence >= 0.8) ~ "more positive", any(Valence >= 0.5 || Valence <= 0.79) ~ "Moderate", any(Valence <= 0.49) ~ "more negative"))
artists <- artists %>% mutate(Valence_C = ifelse(Valence >= 0.8, "more positive", ifelse(Valence >= 0.5 || Valence <= 0.79, "Moderate", ifelse(Valence <= 0.49, "more negative", NA))))
artists <- artists %>% mutate(Valence_C = case_when(Valence >= 0.8 ~ "more positive", Valence >= 0.5 || Valence <= 0.79 ~ "Moderate", Valence <= 0.49 ~ "more negative"))
class(artists$Valence)
artists <- artists %>% mutate(Valence_C = if_else(Valence >= 0.8, "more positive", if_else(Valence >= 0.5 || Valence <= 0.79, "Moderate", if_else(Valence <= 0.49, "more negative", NA))))
artists <- artists %>% mutate(Valence_C = ifelse(Valence >= 0.8, "more positive", NA))
View(artists)
artists$Valence_C <- ifelse(artists$Valence >= 0.5 || artists$Valence <= 0.79, "Moderate", NA)
artists <- artists %>% mutate(Valence_C = ifelse(Valence >= 0.8, "more positive", ifelse(Valence >= 0.5 | Valence <= 0.79, "Moderate", ifelse(Valence <= 0.49, "more negative", NA))))
artists <- artists %>% mutate(Valence_C = ifelse(Valence >= 0.8, "more positive", ifelse((Valence >= 0.5 | Valence <= 0.79), "Moderate", ifelse(Valence <= 0.49, "more negative", NA))))
artists <- artists %>% mutate(Valence_C = ifelse(Valence >= 0.8, "more positive", ifelse(Valence >= 0.5 & Valence <= 0.79, "Moderate", ifelse(Valence <= 0.49, "more negative", NA))))
gss_df <- read.csv("GSS2002.csv")
gss_df <- read.csv("GSS2002.csv")
table(gss_df$Religion,gss_df$DeathPenalty)
sum(is.na(gss2002$Religion))
sum(is.na(gss_df$Religion))
sum(is.na(gss_df$DeathPenalty))
gss.clean <- gss_df[!is.na(gss_df$Religion),]
gss.clean <- gss_df[!is.na(gss2002$DeathPenalty),]
sum(is.na(gss_df$Religion))
sum(is.na(gss_df$DeathPenalty))
gss.clean <- gss_df[!is.na(gss_df$Religion),]
gss.clean <- gss_df[!is.na(gss_df$DeathPenalty),]
table(gss.clean$Religion,gss.clean$DeathPenalty)
View(gss.clean)
myX2.2 = function(A){
r <- rowSums(A)
c <- colSums(A)
N = sum(A)
expected <- outer(r,c)/N
return(sum((A-expected)^2/expected))
}
x2=myX2.2(table(gss.clean$Religion, gss.clean$DeathPenalty))
pchisq(x2, df = (13-1)*(2-1), lower.tail = F)
#at 0.05 siginificance fail to reject H0. (Accept H0)
gss.perm <- gss.clean
myperm = function(){
N <- length(gss.perm[,1])
gss.perm$Religion <- gss.perm$Religion[sample(N,N)]
return(myX2.2(table(gss.perm$Religion, gss.perm$DeathPenalty))) #calculate the test statistic for each permutation.
}
gss.clean2 <- gss_df[!is.na(gss2002$Religion) & !is.na(gss_df$DeathPenalty),]
gss.perm <- gss.clean
myperm = function(){
N <- length(gss.perm[,1])
gss.perm$Religion <- gss.perm$Religion[sample(N,N)]
return(myX2.2(table(gss.perm$Religion, gss.perm$DeathPenalty))) #calculate the test statistic for each permutation.
}
gss.clean2 <- gss_df[!is.na(gss_df$Religion) & !is.na(gss_df$DeathPenalty),]
tableRDP= table(gss.clean2$Religion, gss.clean2$DeathPenalty)
N <- sum(tableRDP)
table(gss.perm$Religion, gss.perm$DeathPenalty)
myX2.2(table(gss.perm$Religion, gss.perm$DeathPenalty))
myX2.obs <- myX2.2(tableRDP)
z <- replicate(10000, myperm()) #10000 permutations
hist(z, breaks = 50, prob = T)
abline(v = myX2.obs, col = 2)
mean(z > myX2.obs) #p-value
#CONCLUSION - We fail to reject the null hypothesis. The Religion is independent from the Death Penalty.
chisq.test(gss2002.clean2$Religion,gss2002.clean2$DeathPenalty,correct=T)
chisq.test(gss.clean2$Religion,gss.clean2$DeathPenalty,correct=T)
#Yes, we get the same conclusion that Religion and DeathPenalty are independent.
Verizon <- read.csv("Verizon.csv")
head(Verizon)
table(Verizon$Group)
boxplot(Time ~ Group, data = Verizon)
boxplot(log10(Time) ~ Group, data = Verizon)
aggregate(Time ~ Group, data = Verizon, FUN = mean)
aggregate(Time ~ Group, data =Verizon , FUN = mean)
mytest.1 = function(mydf){
agg = aggregate(Time ~Group, data = mydf, FUN = mean)
return(agg$Time[1] - agg$Time[2]) #xbar_c - xbar_t
}
mytest.1(Verizon)
Verizon.permute = Verizon #create a copy of the data
new=function(j){
Verizon.permute=j
Verizon.permute$Group = Verizon.permute$Group[sample(nrow(Verizon),nrow(Verizon),replace=F)]
mytest.1(Verizon.permute) #test statistic for the permuted set
}
new(Verizon.permute)
a=replicate(1000,new(Verizon.permute))
integer=as.integer(new(Verizon.permute))
hist(a)
abline(v=mytest.1(Verizon.permute), col = 2)
mean(a > integer)
library(Rspotify)
library(spotidy)
library(httr)
library(jsonlite)
library(spotifyr)#spotifyr is an R wrapper for pulling track audio features and other information from Spotify’s Web API in bulk.
#my_token <- get_spotify_api_token(client_id = "b644c5d65c904fd4b3a9a7e08efc2426",
# client_secret = "ff5c05cb47bf4e709d475059c131ef6d")
#or
#get_spotify_access_token(
#client_id = Sys.getenv("b644c5d65c904fd4b3a9a7e08efc2426"),
#client_secret = Sys.getenv("ff5c05cb47bf4e709d475059c131ef6d"))
Sys.setenv(SPOTIFY_CLIENT_ID = 'b644c5d65c904fd4b3a9a7e08efc2426')
Sys.setenv(SPOTIFY_CLIENT_SECRET = 'ff5c05cb47bf4e709d475059c131ef6d')
access_token <- get_spotify_access_token()
#You can get much more details here
#https://cran.r-project.org/web/packages/spotidy/vignettes/Connecting-with-the-Spotify-API.html
Taylor_Swift <- get_artist_audio_features("Taylor Swift")
John_Legend <- get_artist_audio_features("John Legend")
Beyonce <- get_artist_audio_features("Beyonce")
## You can also access the variables by indexes, but the names are here to see what I'm retreiving
Taylor_Swift_A <-data.frame(Taylor_Swift$artist_name,Taylor_Swift$valence,
Taylor_Swift$danceability,Taylor_Swift$energy,Taylor_Swift$loudness,
Taylor_Swift$speechiness,Taylor_Swift$acousticness,Taylor_Swift$liveness,
Taylor_Swift$tempo,Taylor_Swift$track_name, Taylor_Swift$album_name,Taylor_Swift$album_release_year)
colnames(Taylor_Swift_A) <- c("artist_name","Valence","danceability","energy",
"loudness","speechiness","acousticness","liveness",
"tempo","track_name","album_name","album_release_year")
head(Taylor_Swift_A)
John_Legend_A <-data.frame(John_Legend$artist_name,John_Legend$valence,
John_Legend$danceability,John_Legend$energy,John_Legend$loudness,
John_Legend$speechiness,John_Legend$acousticness,John_Legend$liveness,
John_Legend$tempo,John_Legend$track_name, John_Legend$album_name,John_Legend$album_release_year)
colnames(John_Legend_A) <- c("artist_name","Valence","danceability","energy",
"loudness","speechiness","acousticness","liveness",
"tempo","track_name","album_name","album_release_year")
head(John_Legend_A)
Beyonce_A <-data.frame(Beyonce$artist_name,Beyonce$valence,
Beyonce$danceability,Beyonce$energy,Beyonce$loudness,
Beyonce$speechiness,Beyonce$acousticness,Beyonce$liveness,
Beyonce$tempo,Beyonce$track_name, Beyonce$album_name, Beyonce$album_release_year)
colnames(Beyonce_A) <- c("artist_name","Valence","danceability","energy",
"loudness","speechiness","acousticness","liveness",
"tempo","track_name","album_name","album_release_year")
head(Beyonce_A)
Artists <-rbind(Taylor_Swift_A,John_Legend_A, Beyonce_A)
head(Artists)
write.csv(Artists, "Artists.csv", row.names = FALSE)
library(tidyverse)
artists <- read.csv("Artists.csv")
swift_legend_speech <- artists %>%
filter(artist_name!="Beyoncé") %>% select(artist_name, speechiness)
(avg_speech <- swift_legend_speech %>%
group_by(artist_name) %>%
summarise(avg_speechiness=mean(speechiness)))
ggplot(avg_speech, aes(x=artist_name, y=avg_speechiness)) +
geom_bar(stat = "identity", fill="lightblue") +
coord_flip() +
theme_minimal()
(mean.diff <- avg_speech[2,2] - avg_speech[1,2]) # Swift - Legend
swift <- swift_legend_speech %>%
filter(artist_name=="Taylor Swift") %>%
select(speechiness)
legend <- swift_legend_speech %>%
filter(artist_name=="John Legend") %>%
select(speechiness)
t.test(swift, legend, alt="greater")
bstrap_swift <- artists$speechiness[artists$artist_name=="Taylor Swift"]
bstrap_legend <- artists$speechiness[artists$artist_name=="John Legend"]
n_swift=length(bstrap_swift)
n_legend=length(bstrap_legend)
N=100000
diff.means = numeric(N)
for (i in 1:N)
{
sample.swift <- sample(bstrap_swift, n_swift, replace = TRUE)
sample.legend <- sample(bstrap_legend, n_legend, replace = TRUE)
diff.means[i] <- mean(sample.swift)-mean(sample.legend) #bootstrap sample mean
}
quantile(diff.means, c(0.025, 0.975))
(bias = mean(diff.means) - mean.diff) # estimated bias
artists <- artists %>% mutate(Valence_C = ifelse(Valence >= 0.8, "more positive", ifelse(Valence >= 0.5 & Valence <= 0.79, "Moderate", ifelse(Valence <= 0.49, "more negative", NA))))
View(gss_df)
View(artists)
table(artists$Valence_C,artists$artist_name)
table(artists$Valence_C,artists$artist_name)
chisq.test(artists$Valence_C,artists$artist_name,correct=T)
gss.perm[,1]
View(gss.clean)
gss_df <- read.csv("GSS2002.csv")
table(gss_df$Religion,gss_df$DeathPenalty)
cat("Number of NA's in Religion attribute: ", sum(is.na(gss_df$Religion)))
cat("Number of NA's in DeathPenalty attribute: ", sum(is.na(gss_df$DeathPenalty)))
gss.clean <- gss_df[!is.na(gss_df$Religion) & !is.na(gss_df$DeathPenalty),]
table(gss.clean$Religion,gss.clean$DeathPenalty)
cat("Number of NA's in Religion attribute: ", sum(is.na(gss_df$Religion)))
cat("\nNumber of NA's in DeathPenalty attribute: ", sum(is.na(gss_df$DeathPenalty)))
gss.clean <- gss_df[!is.na(gss_df$Religion) & !is.na(gss_df$DeathPenalty),]
table(gss.clean$Religion,gss.clean$DeathPenalty)
myX2.2 = function(A){
r <- rowSums(A)
c <- colSums(A)
N = sum(A)
expected <- outer(r,c)/N
return(sum((A-expected)^2/expected))
}
x2=myX2.2(table(gss.clean$Religion, gss.clean$DeathPenalty))
cat("Chi-Square statistic: ", pchisq(x2, df = (13-1)*(2-1), lower.tail = F))
gss.perm <- gss.clean #make a new copy of the data
myperm = function(){
N <- length(gss.perm[,1])
gss.perm$Religion <- gss.perm$Religion[sample(N,N,replace=F)] #let's permute happiness levels,no replacement, shuffle everything around and make a new table.
return(myX2.2(table(gss.perm$Religion, gss.perm$DeathPenalty))) #calculate the test statistic for each permutation.
}
gss.clean2 <- gss_df[!is.na(gss_df$Religion) & !is.na(gss_df$DeathPenalty),]
tableRDP= table(gss.clean2$Religion, gss.clean2$DeathPenalty)
N <- sum(tableRDP)
table(gss.perm$Religion, gss.perm$DeathPenalty)
myX2.2(table(gss.perm$Religion, gss.perm$DeathPenalty))
gss.perm <- gss.clean #make a new copy of the data
myperm = function(){
N <- length(gss.perm[,1])
gss.perm$Religion <- gss.perm$Religion[sample(N,N,replace=F)] #let's permute happiness levels,no replacement, shuffle everything around and make a new table.
return(myX2.2(table(gss.perm$Religion, gss.perm$DeathPenalty))) #calculate the test statistic for each permutation.
}
gss.clean2 <- gss_df[!is.na(gss_df$Religion) & !is.na(gss_df$DeathPenalty),]
tableRDP= table(gss.clean2$Religion, gss.clean2$DeathPenalty)
N <- sum(tableRDP)
table(gss.perm$Religion, gss.perm$DeathPenalty)
cat("Test Statistic: ", myX2.2(table(gss.perm$Religion, gss.perm$DeathPenalty)))
gss.perm <- gss.clean #make a new copy of the data
myperm = function(){
N <- length(gss.perm[,1])
gss.perm$Religion <- gss.perm$Religion[sample(N,N,replace=F)] #let's permute happiness levels,no replacement, shuffle everything around and make a new table.
return(myX2.2(table(gss.perm$Religion, gss.perm$DeathPenalty))) #calculate the test statistic for each permutation.
}
gss.clean2 <- gss_df[!is.na(gss_df$Religion) & !is.na(gss_df$DeathPenalty),]
tableRDP= table(gss.clean2$Religion, gss.clean2$DeathPenalty)
N <- sum(tableRDP)
table(gss.perm$Religion, gss.perm$DeathPenalty)
cat("\nTest Statistic: ", myX2.2(table(gss.perm$Religion, gss.perm$DeathPenalty)))
myX2.obs <- myX2.2(tableRDP)
z <- replicate(10000, myperm()) #10000 permutations
hist(z, breaks = 50, prob = T, col="lightblue")
abline(v = myX2.obs, col = 2)
myX2.obs <- myX2.2(tableRDP)
Z <- replicate(10000, myperm()) #10000 permutations
hist(Z, breaks = 50, prob = T, col="lightblue",
main = "Histogram of the Null Distribution (Z)")
abline(v = myX2.obs, col = 2)
chisq.test(gss.clean2$Religion,gss.clean2$DeathPenalty,correct=T)
#Yes, we get the same conclusion that Religion and DeathPenalty are independent.
chisq.test(gss.clean2$Religion,gss.clean2$DeathPenalty,correct=T)
Verizon <- read.csv("Verizon.csv")
head(Verizon)
table(Verizon$Group)
boxplot(Time ~ Group, data = Verizon)
boxplot(log10(Time) ~ Group, data = Verizon)
table(Verizon$Group)
boxplot(Time ~ Group, data = Verizon)
boxplot(log10(Time) ~ Group, data = Verizon)
aggregate(Time ~ Group, data = Verizon, FUN = mean)
aggregate(Time ~ Group, data =Verizon , FUN = mean)
mytest.1 = function(mydf){
agg = aggregate(Time ~Group, data = mydf, FUN = mean)
return(agg$Time[1] - agg$Time[2]) #xbar_c - xbar_t
}
mytest.1(Verizon)
aggregate(Time ~ Group, data =Verizon , FUN = mean)
mytest.1 = function(mydf){
agg = aggregate(Time ~Group, data = mydf, FUN = mean)
return(agg$Time[1] - agg$Time[2]) #xbar_c - xbar_t
}
cat("observed difference of means: ", mytest.1(Verizon))
Verizon.permute = Verizon #create a copy of the data
new=function(j){
Verizon.permute=j
Verizon.permute$Group = Verizon.permute$Group[sample(nrow(Verizon),nrow(Verizon),replace=F)]
mytest.1(Verizon.permute) #test statistic for the permuted set using function created
}
cat("Difference of means of the permuted data: ", new(Verizon.permute))
Verizon.permute = Verizon #create a copy of the data
new=function(j){
Verizon.permute=j
Verizon.permute$Group = Verizon.permute$Group[sample(nrow(Verizon),nrow(Verizon))]
mytest.1(Verizon.permute) #test statistic for the permuted set using function created
}
cat("Difference of means of the permuted data: ", new(Verizon.permute))
Verizon.permute = Verizon #create a copy of the data
new=function(j){
Verizon.permute=j
Verizon.permute$Group = Verizon.permute$Group[sample(nrow(Verizon),nrow(Verizon),replace=F)]
mytest.1(Verizon.permute) #test statistic for the permuted set using function created
}
cat("Difference of means of the permuted data: ", new(Verizon.permute))
Verizon <- read.csv("Verizon.csv")
head(Verizon)
table(Verizon$Group)
boxplot(Time ~ Group, data = Verizon)
boxplot(log10(Time) ~ Group, data = Verizon)
aggregate(Time ~ Group, data = Verizon, FUN = mean)
aggregate(Time ~ Group, data =Verizon , FUN = mean)
mytest.1 = function(mydf){
agg = aggregate(Time ~Group, data = mydf, FUN = mean)
return(agg$Time[1] - agg$Time[2]) #xbar_c - xbar_t
}
cat("observed difference of means: ", mytest.1(Verizon))
Verizon.permute = Verizon #create a copy of the data
new=function(j){
Verizon.permute=j
Verizon.permute$Group = Verizon.permute$Group[sample(nrow(Verizon),nrow(Verizon),replace=F)]
mytest.1(Verizon.permute) #test statistic for the permuted set using function created
}
cat("Difference of means of the permuted data: ", new(Verizon.permute))
a=replicate(1000,new(Verizon.permute))
integer=as.integer(new(Verizon.permute))
hist(a, main = "Histogram of the Differences of Means")
abline(v=mytest.1(Verizon.permute), col = 2)
a=replicate(1000,new(Verizon.permute))
integer=as.integer(new(Verizon.permute))
hist(a, main = "Histogram of the Differences of Means", col = "lightblue")
abline(v=mytest.1(Verizon.permute), col = 2)
diff_means=replicate(1000,new(Verizon.permute))
integer=as.integer(new(Verizon.permute))
hist(diff_means, main = "Histogram of the Differences of Means",
col = "lightblue")
abline(v=mytest.1(Verizon.permute), col = 2)
cat("p-value: ", mean(diff_means > integer))
setwd("~/anly-501-project-TegveerG/501-project-website/pages")
library(jsonlite)
rekt_raw <- read_json("../../data/Raw Data/Python_REKT_Database_API/REKT_Database_Python_API.json", simplifyVector = TRUE)
print(knitr::kable((rekt_raw)))
library(jsonlite)
rekt_raw <- read_json("../../data/Raw Data/Python_REKT_Database_API/REKT_Database_Python_API.json", simplifyVector = TRUE)
knitr::kable((rekt_raw))
head(rekt_raw)
View(rekt_raw)
